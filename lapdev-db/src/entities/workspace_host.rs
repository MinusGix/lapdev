//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "workspace_host")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    pub host: String,
    pub port: i32,
    pub inter_port: i32,
    pub status: String,
    pub cpu: i32,
    pub memory: i32,
    pub disk: i32,
    pub available_dedicated_cpu: i32,
    pub available_shared_cpu: i32,
    pub available_memory: i32,
    pub available_disk: i32,
    pub region: String,
    pub zone: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::prebuild::Entity")]
    Prebuild,
    #[sea_orm(has_many = "super::prebuild_replica::Entity")]
    PrebuildReplica,
    #[sea_orm(has_many = "super::workspace::Entity")]
    Workspace,
}

impl Related<super::prebuild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Prebuild.def()
    }
}

impl Related<super::prebuild_replica::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PrebuildReplica.def()
    }
}

impl Related<super::workspace::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Workspace.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
